package cn.xylink.mting.ui.activity;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v7.app.AlertDialog;import android.text.TextUtils;import cn.xylink.mting.R;import cn.xylink.mting.base.BaseResponse;import cn.xylink.mting.bean.UserInfo;import cn.xylink.mting.contract.CheckTokenContact;import cn.xylink.mting.model.CheckTokenRequest;import cn.xylink.mting.presenter.CheckTokenPresenter;import cn.xylink.mting.utils.ContentManager;import cn.xylink.mting.utils.L;public class ShareActivity extends BasePresenterActivity implements CheckTokenContact.ICheckTokenView {    private final static int MSG_FORWARD_ACTIVITY = 1;    private Context mContext;    private CheckTokenPresenter tokenPresenter;    private String shareUrl;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mContext = this;        shareCheck(getIntent());        tokenPresenter = (CheckTokenPresenter) createPresenter(CheckTokenPresenter.class);        tokenPresenter.attachView(this);        CheckTokenRequest requset = new CheckTokenRequest();        requset.doSign();        tokenPresenter.onCheckToken(requset);    }    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        shareCheck(getIntent());    }    private Handler mHandler = new Handler(new Handler.Callback() {        @Override        public boolean handleMessage(Message m) {            switch (m.what) {                case MSG_FORWARD_ACTIVITY:                    final AlertDialog.Builder builder = new AlertDialog.Builder(mContext);                    builder.setMessage("分享成功")                            .setNegativeButton("查看", new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog, int which) {                                    dialog.dismiss();                                    shareMain();                                }                            });                    builder.create().show();                    break;            }            return false;        }    });    public void shareCheck(Intent intent) {        if (intent == null)            return;        Uri uri = intent.getData();        if (uri != null) {            String scheme = uri.getScheme();            String SpecificPart = uri.getSchemeSpecificPart();            shareUrl = scheme + ":" + SpecificPart;            L.v("url", shareUrl);            return;        }        String action = intent.getAction();        String type = intent.getType();        L.v("type", type);        if (Intent.ACTION_SEND.equals(action) && type != null) {            if ("text/plain".equals(type)) {                String share = intent.getStringExtra(Intent.EXTRA_TEXT);                L.v("share", share);                if (TextUtils.isEmpty(share))                    return;                String htmlText = intent.getStringExtra(Intent.EXTRA_HTML_TEXT);                L.v("htmlText", htmlText);                int beginIndex = share.indexOf("http://") == -1 ? share.indexOf("https") : share.indexOf("http://");                int lastIndex = share.length();                shareUrl = share.substring(beginIndex, lastIndex);                L.v("shareUrl", shareUrl);            }        }    }    @Override    protected void onDestroy() {        super.onDestroy();        mHandler.removeMessages(MSG_FORWARD_ACTIVITY);    }    @Override    protected void preView() {        setContentView(R.layout.activity_share_main);    }    @Override    protected void initView() {    }    @Override    protected void initData() {        tokenPresenter = (CheckTokenPresenter) createPresenter(CheckTokenPresenter.class);        tokenPresenter.attachView(this);        CheckTokenRequest requset = new CheckTokenRequest();        requset.doSign();        tokenPresenter.onCheckToken(requset);    }    @Override    protected void initTitleBar() {    }    @Override    public void onCheckTokenSuccess(BaseResponse<UserInfo> response) {//        shareMain();    }    @Override    public void onCheckTokenError(int code, String errorMsg) {        if (code != -999) {            if (TextUtils.isEmpty(ContentManager.getInstance().getLoginToken())) {                startActivity(new Intent(this, LoginActivity.class));                finish();            } else {                shareMain();            }        } else {            startActivity(new Intent(this, LoginActivity.class));            finish();        }    }    public void shareMain() {        Intent intent = new Intent(mContext, MainActivity.class);        intent.putExtra(MainActivity.URL_KEY, shareUrl);        startActivity(intent);        finish();    }}